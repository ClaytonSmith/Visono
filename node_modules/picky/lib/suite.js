
/*!
 * Picky
 * @license MIT
 */

/*
 * Module dependencies
 */

var Mocha = require('mocha');
var Yadda = require('yadda');
var domain = require('domain');

/*
 * Variables
 */

var cache = require.cache;

/*
 * Suite
 */

function Suite (options) {
  var me = this;

  me.opts = options || {};
  if (!me.opts.regTestFile) me.opts.regTestFile = /\.test\.js$/;
  if (!me.opts.regFeatureFile) me.opts.regFeatureFile = /\.feature$/;
  me.ctx = global;
  me.mocha = new Mocha(options);
  me.featureFiles = [];

  me.cacheMap = {};
  for (var key in cache) {
    me.cacheMap[key] = true;
  }

  Yadda.plugins.mocha.StepLevelPlugin.init({
    container: me.ctx
  });


  // var gino = new mocha.Runnable(null, function () {
  // });
  // suite.suite.addTest(gino);
}

Suite.prototype.addFile = function (file) {
  if (!file) return;
  if (file.match(this.opts.regTestFile)) {
    return this.mocha.addFile(file);
  }
  if (file.match(this.opts.regFeatureFile)) {
    return this.featureFiles.push(file);
  }
};

Suite.prototype.parseFeatures = function () {
  var ctx = this.ctx;
  var library = require('../../../deploy-today/app-accounts-api/test/steps/bottles');
  var engine = Yadda.createInstance(library);

  this.featureFiles.forEach(function(file) {
    ctx.featureFile(file, function(feature) {
      ctx.scenarios(feature.scenarios, function(scenario) {
        ctx.steps(scenario.steps, function(step, done) {
          engine.run(step, done);
        });
      });
    });
  });
};

Suite.prototype.clearCache = function () {
  for (var key in cache) {
    if (!this.cacheMap[key]) {
      delete cache[key];
    }
  }
};

Suite.prototype.run = function (done) {
  var me = this;
  var d = domain.create();
  var ctx;

  function handleError (err) {
    if (ctx && 'AssertionError' === err.name) {
      ctx.uncaught(err);
      done();
    }
    else {
      me.clearCache();
      console.log(err.stack)
      done(new Error(err, {
        stack: err.stack,
        showStack: true
      }));
    }
  }

  d.on('error', handleError);

  d.run(function () {
    try {
      me.mocha.loadFiles();
      me.parseFeatures();
      ctx = me.mocha.run(function (count) {
        me.clearCache();
        if (count) return done(new Error('Picky', count + ' ' + (count === 1 ? 'test' : 'tests') + ' failed.', {
          showStack: false
        }));
        // if (!hasTests) return done();
        done(); // !!!!!!
      });

      ctx.on('end', function () {
        me.clearCache();
        done();
      });
    }
    catch (err) {
      handleError(err);
    }
  });

};

/*
 * Exports
 */

module.exports = Suite;
