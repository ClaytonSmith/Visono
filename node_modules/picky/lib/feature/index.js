
/*!
 * Picky
 * @license MIT
 */

/*
 * Module dependencies
 */

var Picky = require('../picky');
var Yadda = require('yadda');
var util = require('../util');

/*
 * Variables
 */

var i8nl = Yadda.localisation;
var Language = Yadda.localisation.Language;
var Dictionary = Yadda.Dictionary;
var Library = Yadda.Library;
var dicts = {};
var libs = {};
var langs = {};

/*
 * dictionary
 */

function dictionary (key, val) {
  var dic;
  if (val && Array.isArray(val)) {
    // set multiple
    var dic = new Dictionary();
    val.forEach(function (d) {
      dic.merge(dictionary(d));
    });
  }
  else if (val) {
    // set single
    dic = util.isString(val) ? dictionary(val) : val;
  }
  else {
    // get
    dic = dicts[key];
    if (dic) return dic;
    dic = new Dictionary();
  }
  return dicts[key] = dic;
}

/*
 * library
 */

function library (key, options) {
  options = options || {};
  var lib = libs[key];
  if (lib) return lib;
  var dic = options.dictionary;
  lib = options.lang
    ? language(options.lang).library(dic)
    : new Library(dic);

  if (options.steps) {

  }

  return libs[key] = lib;
}

function loadLibraries (options) {
  return loadFiles(options, {
    filter: /(.+library)\.js$/,
    resolve: function (fn) {
      return fn();
    }
  });
}

/*
 * language
 */

function language (key, val) {
  var lan;
  if (val) {
    // set
    lan = val;
  }
  else {
    // get
    lan = langs[key];
    if (lan) return lan;
    lan = new Language();
  }
  return langs[key] = lan;
}

for(var lan in i8nl) {
  if ('Language' !== lan) language(lan.toLowerCase(), i8nl[lan]);
}

/*
 * Exports
 */

exports.dictionary = dictionary;
exports.library = library;
exports.loadLibraries = loadLibraries;
exports.language = language;
exports.Steps = require('./steps');

var g = new exports.Steps()
/*
 * loadFiles
 */

function loadFiles (opts, defs) {
  if (util.isString(opts)) {
    opts = {
      dirname: opts
    };
  }
  var resolve = opts.resolve || defs.resolve;
  return util.requireAll({
    dirname: opts.dirname || defs.dirname,
    filter: opts.filter || defs.filter,
    excludeDirs: opts.excludeDirs || defs.excludeDirs,
    resolve: resolve && function (fn) {
      if (fn && util.isFunction(fn)) fn(Picky);
    }
  });
}
